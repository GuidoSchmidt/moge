{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"vs",
				"vsReflectVec"
			],
			[
				"ss",
				"ssPosition"
			],
			[
				"No",
				"NormalMatrix"
			],
			[
				"sam",
				"sampledDepth"
			],
			[
				"fra",
				"fragment"
			],
			[
				"cs",
				"cosAngIncidence"
			],
			[
				"defe",
				"deferredDiffuseTex"
			],
			[
				"norm",
				"NormalAtPos"
			],
			[
				"lin",
				"linearizeDepth"
			],
			[
				"Hei",
				"Height"
			],
			[
				"de",
				"delta"
			],
			[
				"defer",
				"deferredDepthTex"
			],
			[
				"frag",
				"fragment"
			],
			[
				"mat",
				"materialID"
			],
			[
				"fr",
				"fragmentDepth"
			],
			[
				"def",
				"deferredDepthTex"
			],
			[
				"Projec",
				"ProjectionMatrix"
			],
			[
				"ssP",
				"ssPosition"
			],
			[
				"ray",
				"rayDepth"
			],
			[
				"Proj",
				"ProjectionMatrix"
			],
			[
				"line",
				"linearizeDepth"
			],
			[
				"pro",
				"ProjectionMatrix"
			],
			[
				"vert",
				"vert_EyePosition"
			],
			[
				"ssVe",
				"ssVecPos"
			],
			[
				"dee",
				"deferredNormalTex"
			],
			[
				"vsPos",
				"vsPosReflect"
			],
			[
				"vsReflectV",
				"vsReflectVec"
			],
			[
				"vec",
				"vector"
			],
			[
				"reflec",
				"reflection"
			],
			[
				"refle",
				"reflection"
			],
			[
				"dept",
				"depthAtFragment"
			],
			[
				"depth",
				"depthAtFragment"
			],
			[
				"samplin",
				"samplingPosition"
			],
			[
				"init",
				"initialRay"
			],
			[
				"dep",
				"depthBudderDepth"
			],
			[
				"ini",
				"initalStep"
			],
			[
				"sampling",
				"samplingPosition"
			],
			[
				"ref",
				"reflect"
			],
			[
				"ssPO",
				"ssPosition3D"
			],
			[
				"vsPo",
				"vsPosition"
			],
			[
				"co",
				"count"
			],
			[
				"View",
				"ViewMatrix"
			],
			[
				"ssPo",
				"ssPosition2D"
			],
			[
				"Ca",
				"Camera"
			],
			[
				"vie",
				"vsViewVec"
			],
			[
				"nor",
				"normalmap"
			],
			[
				"no",
				"normalmap"
			],
			[
				"nr",
				"normalmap"
			],
			[
				"ver",
				"vert_UV"
			],
			[
				"normal",
				"normalTex"
			],
			[
				"vert_",
				"vert_EyePosition"
			],
			[
				"Refle",
				"Reflection"
			],
			[
				"wor",
				"worldPos"
			],
			[
				"Ref",
				"ReflectDir"
			],
			[
				"cube",
				"cubeMapColor"
			],
			[
				"world",
				"worldNormal"
			],
			[
				"wol",
				"worldPos"
			],
			[
				"SSR",
				"SSR"
			],
			[
				"ssSh",
				"ssShadedPosition"
			],
			[
				"vsS",
				"vsShadedNormal"
			],
			[
				"W",
				"Width"
			],
			[
				"ra",
				"rayDepth"
			],
			[
				"sampled",
				"sampledDepth"
			],
			[
				"refl",
				"reflect"
			],
			[
				"new",
				"newReflectionVector"
			],
			[
				"cam",
				"Camera"
			],
			[
				"pos",
				"position"
			],
			[
				"xy",
				"xyz"
			],
			[
				"n",
				"normalize"
			],
			[
				"deferreD",
				"deferredDiffuseTex"
			],
			[
				"deferre",
				"deferredDiffuseTex"
			],
			[
				"rayD",
				"rayDepth"
			],
			[
				"sa",
				"sampledPosition"
			],
			[
				"rec",
				"reflectedColor"
			],
			[
				"trac",
				"tracedRay"
			],
			[
				"step",
				"stepSize"
			],
			[
				"traced",
				"tracedRay"
			],
			[
				"reflecta",
				"reflectance"
			],
			[
				"reflection",
				"reflectionVector"
			],
			[
				"view",
				"viewVector"
			],
			[
				"deferr",
				"deferredPositionTex"
			],
			[
				"in",
				"include"
			],
			[
				"back",
				"background"
			],
			[
				"fon",
				"font-variant"
			],
			[
				"text",
				"text-transform"
			],
			[
				"pa",
				"padding"
			],
			[
				"font",
				"font-weight"
			],
			[
				"sh",
				"box-shadow"
			],
			[
				"trans",
				"transition	CSS - transition: ;"
			],
			[
				"list",
				"list-style"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "",
			"file": "/C/Program Files (x86)/Console2/console.xml",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/guidoschmidt/Development/code/c++/moge/source/shaders/deferred/3-deferred_reflections.frag.glsl",
			"settings":
			{
				"buffer_size": 7340,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/guidoschmidt/Development/code/c++/moge/source/shaders/deferred/1-gBufferProgram.frag.glsl",
			"settings":
			{
				"buffer_size": 3521,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/guidoschmidt/Development/code/c++/moge/source/shaders/deferred/1-gBufferProgram.vert.glsl",
			"settings":
			{
				"buffer_size": 1246,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "#version 330\nlayout(std140) uniform;\n\n//Output\nout vec4 outputColor;\n\n//Uniforms\nuniform sampler2D positionTexture;\nuniform sampler2D normalTexture;\nuniform sampler2D otherTexture;\nuniform sampler2D depthTexture;\nuniform sampler2D colorBufferTexture;\n\n//Projection matrix\nuniform ProjectionBlock\n{\n	mat4 cameraToClipMatrix;\n	float zNear;\n	float zFar;\n	float screenWidth;\n	float screenHeight;\n};\n\n//Random function used for jittering rays\nfloat rand(vec2 co)\n{\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n//Z buffer is nonlinear by default, so we fix this here\nfloat linearizeDepth(float depth)\n{\n	return (2.0 * zNear) / (zFar + zNear - depth * (zFar - zNear));\n}\n\nvec2 getScreenSpacePosition()\n{\n	return gl_FragCoord.xy/vec2(screenWidth,screenHeight);\n}\n\n//Convert something in camera space to screen space\nvec3 convertCameraSpaceToScreenSpace(in vec3 cameraSpace)\n{\n	vec4 clipSpace = cameraToClipMatrix * vec4(cameraSpace, 1);\n	vec3 NDCSpace = clipSpace.xyz / clipSpace.w;\n	vec3 screenSpace = 0.5 * NDCSpace + 0.5;\n	return screenSpace;\n}\n\nvec4 ComputeReflection()\n{\n	//Tweakable variables\n	float initialStepAmount = .01;\n	float stepRefinementAmount = .7;\n	int maxRefinements = 3;\n	int maxDepth = 1;\n	\n	//Values from textures\n	vec2 fragment = getScreenSpacePosition();\n	vec3 vsPosition = texture(positionTexture,fragment).xyz;\n	vec3 vsNormal = texture(normalTexture,fragment).xyz;\n	float roughness = texture(otherTexture,fragment).x;\n	float reflectivity = texture(otherTexture,fragment).y;\n\n	//Screen space vector\n	vec3 vsViewVec = normalize(vsPosition);\n\n	vec3 vsReflectVec = normalize(reflect(vsViewVec, vsNormal));\n	vec3 ssPosition = convertCameraSpaceToScreenSpace(vsPosition);\n	vec3 vsReflectPos = vsPosition + vsReflectVec;\n	vec3 ssReflectPos = convertCameraSpaceToScreenSpace(vsReflectPos);\n	vec3 screenSpaceVector = initialStepAmount*normalize(ssReflectPos - ssPosition);\n	\n	//Jitter the initial ray\n	//float randomOffset1 = clamp(rand(gl_FragCoord.xy),0,1)/1000.0;\n	//float randomOffset2 = clamp(rand(gl_FragCoord.yy),0,1)/1000.0;\n	//screenSpaceVector += vec3(randomOffset1,randomOffset2,0);\n	\n	vec3 oldPosition = screenSpacePosition + screenSpaceVector;\n	vec3 currentPosition = oldPosition + screenSpaceVector;\n	\n	//State\n	vec4 color = vec4(0,0,0,1);\n	int count = 0;\n	int numRefinements = 0;\n	int depth = 0;\n\n	//Ray trace!\n	while(depth < maxDepth) //doesnt do anything right now\n	{\n		while(count < 1000)\n		{\n			//Stop ray trace when it goes outside screen space\n			if(currentPosition.x < 0 || currentPosition.x > 1 ||\n			   currentPosition.y < 0 || currentPosition.y > 1 ||\n			   currentPosition.z < 0 || currentPosition.z > 1)\n				break;\n\n			//intersections\n			vec2 samplePos = currentPosition.xy;\n			float currentDepth = linearizeDepth(currentPosition.z);\n			float sampleDepth = linearizeDepth(texture(depthTexture, samplePos).x);\n			float diff = currentDepth - sampleDepth;\n			float error = length(screenSpaceVector);\n			if(diff >= 0 && diff < error)\n			{\n				screenSpaceVector *= stepRefinementAmount;\n				currentPosition = oldPosition;\n				numRefinements++;\n				if(numRefinements >= maxRefinements)\n				{\n					vec3 normalAtPos = texture(normalTexture, samplePos).xyz;\n					float orientation = dot(cameraSpaceVector,normalAtPos);\n					if(orientation < 0)\n					{\n						float cosAngIncidence = -dot(cameraSpaceViewDir,vsNormal);\n						cosAngIncidence = clamp(1-cosAngIncidence,0.0,1.0);\n						color = texture(colorBufferTexture, samplePos) * cosAngIncidence;\n					}\n					break;\n				}\n			}\n\n			//Step ray\n			oldPosition = currentPosition;\n			currentPosition = oldPosition + screenSpaceVector;\n			count++;\n		}\n		depth++;\n	}\n	return color;\n}\n\n//Main\nvoid main()\n{\n	vec2 screenSpacePosition = getScreenSpacePosition();\n	outputColor = texture(colorBufferTexture, screenSpacePosition);\n	float reflectivity = texture(otherTexture, screenSpacePosition).y;\n	if(reflectivity > .01) //Don't draw background or non reflective pixels\n	{\n		outputColor = reflectivity*ComputeReflection() + (1.0 - reflectivity)*outputColor;\n	}\n	outputColor.w = 1.0;\n}",
			"file": "/C/Users/guidoschmidt/Development/code/c++/code-examples/Real-Time-Reflections-OpenGL-IanLilley/data/shaders/ReflectionFrag.frag",
			"file_size": 4298,
			"file_write_time": 130044968909361595,
			"settings":
			{
				"buffer_size": 4076,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 110.0,
		"selected_items":
		[
			[
				"Insta",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"Insa",
				"Package Control: Install Package"
			],
			[
				"Mar",
				"Markdown Preview: open Markdown Cheat sheet"
			],
			[
				":i",
				"Gist: Insert Gist"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			]
		],
		"width": 386.0
	},
	"console":
	{
		"height": 125.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/shaders/deferred/1-gBufferProgram.frag.glsl",
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/shaders/deferred/1-gBufferProgram.vert.glsl",
		"/C/Users/guidoschmidt/Development/code/c++/code-examples/Real-Time-Reflections-OpenGL-IanLilley/data/shaders/ReflectionFrag.frag",
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/shaders/deferred/2-deferred_lighting.frag.glsl",
		"/C/Users/guidoschmidt/.profile",
		"/C/Program Files (x86)/Console2/console.xml",
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/shaders/deferred/3-deferred_reflections.frag.glsl",
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/shaders/deferred/1-pass_one.vert.glsl",
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/shaders/deferred/1-gBufferProgram.glsl",
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/shaders/deferred/1-pass_one.frag.glsl",
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/shaders/deferred/2-deferred_lighting.vert.glsl",
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/shaders/deferred/3-deferred_reflections-NEW.frag.glsl",
		"/C/Users/guidoschmidt/Development/code/glsl/ssr/gamedev.net-ssr.glsl",
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/shaders/deferred/3-deferred_reflections.vert.glsl",
		"/C/Temp/ssr.hlsl",
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/scene/scenegraph/Mesh.cpp",
		"/C/Users/guidoschmidt/Development/code/c++/KoRE/demos/MainGLFW/CMakeLists.txt",
		"/C/Users/guidoschmidt/Development/code/c++/KoRE/CMakeLists.txt",
		"/C/Temp/test.html",
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/shaders/forward/cm_forward.vert.glsl",
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/shaders/forward/cm_forward.frag.glsl",
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/shaders/empty/shader.frag.glsl",
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/shaders/empty/shader.vert.glsl",
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/engine/Renderer.h",
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/engine/Renderer.cpp",
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/engine/FSQ.h",
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/engine/FSQ.cpp",
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/engine/FrameBufferObject.h",
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/engine/FrameBufferObject.cpp",
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/engine/Context.h",
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/engine/Context.cpp",
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/scene/Mesh.cpp",
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/shaders/deferred/4-bb.frag.glsl",
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/shaders/deferred/4-bb.vert.glsl",
		"/C/Games/KentuckyRouteZero_ActI_WIN_v3/README.txt",
		"/C/Users/guidoschmidt/Development/code/c++/code-examples/OrderIndependentTranslucency/OrderIndependentTranslucency/App.cpp",
		"/C/Users/guidoschmidt/Downloads/ABufferGL4LinkedList/ABufferLinkedList/ABufferGL4.cpp",
		"/C/Users/guidoschmidt/Development/code/glsl/ssr/SSR-new.frag.glsl",
		"/C/Users/guidoschmidt/Development/code/c++/code-examples/Real-Time-Reflections-OpenGL-IanLilley/src/OpenGL/GLView.cpp",
		"/C/Users/guidoschmidt/Development/code/c++/KoRE/mystuff/protokoll-240113.md",
		"/C/Users/guidoschmidt/Downloads/Whole.Tomato.Visual.Assist.X.for.Visual.Studio.2010.v10.6.1823.0.WinALL.Cracked-BRD/brd.nfo",
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/shaders/deferred/1-pass_one.frag",
		"/C/Users/guidoschmidt/Development/code/glsl/ssr/postShader.vs",
		"/C/Users/guidoschmidt/Development/code/glsl/ssr/postShader.fs",
		"/C/Users/guidoschmidt/Development/code/glsl/bilateral filter/bilateralFilter.frag.glsl",
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/shaders/forward/forward.frag.glsl",
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/shaders/forward/forward.vert.glsl",
		"/C/Users/guidoschmidt/.gitconfig",
		"/C/Users/guidoschmidt/Development/code/c++/moge/img/bsc09.glsl",
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/scene/Camera.h",
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/utilities/Common.h",
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/scene/SceneGraph.cpp",
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/utilities/Singleton.h",
		"/C/Users/guidoschmidt/AppData/Roaming/Sublime Text 2/Packages/Markdown Preview/sample.md",
		"/C/Users/guidoschmidt/Dropbox/Studium/Kunstgeschichte/Kusntgeschichte 4.MD",
		"/C/Users/guidoschmidt/Dropbox/Studium/Kunstgeschichte/Kunstgeschichte 4.MD",
		"/C/Users/guidoschmidt/Development/code/c++/moge/README.md",
		"/C/Users/guidoschmidt/Development/MinGW/lib/libassimp.dll.a",
		"/D/Development/libraries-frameworks/c++/AntTweakBar/examples/TwAdvanced1.cpp",
		"/D/Development/libraries-frameworks/c++/AntTweakBar/examples/TwSimpleGLFW.c",
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/scene/Mesh.h",
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/scene/Node.cpp",
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/scene/Node.h",
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/scene/SceneGraph.h",
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/scene/Transformation.cpp",
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/scene/Transformation.h",
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/engine/Scene.cpp",
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/engine/Scene.h",
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/engine/ShaderProgram.cpp",
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/engine/ShaderProgram.h",
		"/C/Users/guidoschmidt/Development/code/c++/moge/source/main.cpp",
		"/C/Windows/System32/drivers/etc/hosts",
		"/D/Temp/CS6 Master Collection/KEYGEN-XFORCE [WIN OSX]/x-force.nfo",
		"/C/Users/guidoschmidt/Development/code/c++/moge/project/sublime-text",
		"/C/Users/guidoschmidt/Websites/Uni Koblenz/css/style.css",
		"/C/Users/guidoschmidt/Websites/Uni Koblenz/index.html",
		"/D/Development/libraries-frameworks/c++/assimp--3.0.1270-sdk/CMakeLists.txt",
		"/C/Users/guidoschmidt/AppData/Roaming/Sublime Text 2/Packages/Default/Preferences.sublime-settings",
		"/C/Users/guidoschmidt/AppData/Roaming/Sublime Text 2/Packages/User/Preferences.sublime-settings",
		"/C/Users/guidoschmidt/AppData/Roaming/Sublime Text 2/Packages/User/Gist.sublime-settings",
		"/C/Users/guidoschmidt/Websites/Uni Koblenz/img/cmake-installation.PNG",
		"/C/Program Files (x86)/CMake 2.8/share/cmake-2.8/Modules/FindBoost.cmake",
		"/D/Development/libraries-frameworks/c++/boost_1_52_0/INSTALL",
		"/C/Users/guidoschmidt/AppData/Roaming/Sublime Text 2/Packages/SideBarEnhancements/messages/11.13.2012.1305.0.txt"
	],
	"find":
	{
		"height": 40.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"screenSpaceVectorPosition",
			"cameraSpaceVectorPosition",
			"vsReflectVec",
			"screenSpacePosition",
			"cameraSpacePosition",
			"cameraSpaceNormal",
			"cameraSpaceViewDir",
			"cameraSpaceVector",
			"screenSpacePosition2D",
			"sampledDepth",
			"Projec",
			"mintty",
			"{\n",
			"0",
			";\n",
			"ssReflectVector",
			"0f",
			"	// Flipping z axis of screen space reflection vector for debugging (e.g. rendering in rgb)\n	//ssReflectVec.z *= -1;",
			"0",
			");\n",
			"vsReflectVec",
			"cygwin",
			";\n",
			"&&)\n",
			");\n",
			"vec3 L = normalize(vert_LightDir.xyz);",
			"layout (location=0) in vec3 vertex;\nlayout (location=1) in vec3 normal;\nlayout (location=2) in vec2 uv;",
			"else",
			"deferredReflectanceTex",
			"vec3 viewSpaceToScreenSpace(vec3 vector)\n{\n	vec4 clipSpace = ProjectionMatrix * ViewMatrix * vec4(vector, 1.0f);\n	vec3 canonicVolumeSpace = clipSpace.xyz / clipSpace.w;\n	vec3 screenSpace = 0.5f * canonicVolumeSpace + 0.5f;\n	\n	return screenSpace;\n}",
			"deferredReflectanceTex",
			"reflectance",
			"));\n",
			"bool",
			"*\n",
			");\n",
			"\n",
			"SSR",
			"newSSR",
			"Window",
			"Render",
			" (",
			";\n",
			"return",
			"position",
			"015f",
			";\n",
			"sampledPosition",
			"sampledDepth",
			"()",
			"Convert",
			"vec3",
			"FragColor",
			"wsViewVec",
			";\n",
			" \n",
			" )",
			"geometry",
			"GEOMETRY",
			"geometry",
			"BOOST"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": true,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/C/Program Files (x86)/Console2/console.xml",
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/C/Users/guidoschmidt/Development/code/c++/moge/source/shaders/deferred/3-deferred_reflections.frag.glsl",
					"settings":
					{
						"buffer_size": 7340,
						"regions":
						{
						},
						"selection":
						[
							[
								2209,
								2209
							]
						],
						"settings":
						{
							"syntax": "Packages/ShaderLanguages/OpenGL SL.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1461.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/C/Users/guidoschmidt/Development/code/c++/moge/source/shaders/deferred/1-gBufferProgram.frag.glsl",
					"settings":
					{
						"buffer_size": 3521,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/ShaderLanguages/OpenGL SL.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 300.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/C/Users/guidoschmidt/Development/code/c++/moge/source/shaders/deferred/1-gBufferProgram.vert.glsl",
					"settings":
					{
						"buffer_size": 1246,
						"regions":
						{
						},
						"selection":
						[
							[
								834,
								821
							]
						],
						"settings":
						{
							"syntax": "Packages/ShaderLanguages/OpenGL SL.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 4,
					"file": "/C/Users/guidoschmidt/Development/code/c++/code-examples/Real-Time-Reflections-OpenGL-IanLilley/data/shaders/ReflectionFrag.frag",
					"settings":
					{
						"buffer_size": 4076,
						"regions":
						{
						},
						"selection":
						[
							[
								2970,
								2970
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1750.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 40.0
	},
	"input":
	{
		"height": 40.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.626555606501,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"replace":
	{
		"height": 0.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"inde",
				"index.html"
			],
			[
				"sty",
				"css/style.css"
			],
			[
				"in",
				"index.html"
			],
			[
				"sy",
				"css/style.css"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
		],
		"width": 380.0
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 250.0,
	"status_bar_visible": true
}
